module Plasmacore

class GDNode [compound]
  GLOBAL METHODS
    method create<<$ClassName>>->GDNode
      local result : GDNode
      native @|$result = (PlasmacoreGDNode){ memnew(godot::$ClassName) };
      return result

    method operator?( obj:GDNode )->Logical
      return obj.exists

  PROPERTIES
    native "godot::Node* value;"

  METHODS
    method cloned->GDNode
      return query_node<<duplicate>>

    method add( child:GDNode )
      call<<add_child>>( child )

    method count->Int32
      return query_int32<<get_child_count>>

    method name->String
      return query_string<<get_name>>

    method get( index:Int32 )->GDNode
      local result : GDNode
      native @|if ($this.value) $result = (PlasmacoreGDNode){ $this.value->get_child($index) };
      return result

    method get( node_path:String )->GDNode
      local result : GDNode
      if (this.exists)
        native @|godot::NodePath path( $node_path->data->as_utf8 );
                |$result = (PlasmacoreGDNode){ $this.value->get_node_or_null( path ) };
      endIf
      return result

    method instance_of<<$GodotType>>->Logical
      local result : Logical
      native @|if ($this.value) $result = !!godot::Object::cast_to<godot::$GodotType>( $this.value );
      return result

    method last->GDNode
      return this[ count-1 ]

    method set_name( new_name:String )
      call<<set_name>>( new_name )

    method set_pixel_scale( scale:Real )
      call<<Sprite3D,set_pixel_size>>( scale )

    method set_position( xy:XY )
      call<<Node3D,set_position>>( XYZ(xy,0) )

    method set_rotation( radians:Radians )
      call<<Node3D,set_rotation>>( XYZ(0,0,radians.value) )

    method set_scale( scale:Real )
      call<<Node3D,set_scale>>( XYZ(scale,scale,scale) )

    method set_scale( scale:RealXY )
      call<<Node3D,set_scale>>( XYZ(scale,1.0) )

    method set_visible( setting:Logical )
      call<<Node2D,set_visible>>( setting )
      call<<Node3D,set_visible>>( setting )

    method to->String
      if (not this.exists) return "null"
      return name

    method call<<$GodotType,$method_name>>( value:Logical )
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node) node->$method_name( $value );
              |}

    method call<<$method_name>>( new_value:GDNode )
      native @|if ($this.value)
              |{
              |  if ($this.value) $this.value->$method_name( $new_value.value );
              |}

    method call<<$GodotType,$method_name>>( new_value:GDNode )
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node) node->$method_name( $new_value.value );
              |}

    method call<<$GodotType,$method_name>>( value:Real )
      if (not this) return
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node) node->$method_name( (float)$value );
              |}

    method call<<$method_name>>( arg:String )
      native @|if ($this.value)
              |{
              |  godot::String arg( $arg->data->as_utf8 );
              |  $this.value->$method_name( arg );
              |}

    method call<<$GodotType,$method_name>>( xyz:XYZ )
      if (not this) return
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node)
              |  {
              |    godot::Vector3 value( (float)$xyz.x, (float)$xyz.y, (float)$xyz.z );
              |    node->$method_name( value );
              |  }
              |}

    method query_int32<<$method_name>>()->Int32
      local result : Int32
      native @|if ($this.value) $result = $this.value->$method_name();
      return result

    method query_int32<<$GodotType,$method_name>>()->Int32
      local result : Int32
      native @|godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |if (node) $result = node->$method_name();
      return result

    method query_node<<$method_name>>()->GDNode
      local result : GDNode
      native @|if ($this.value) $result = (PlasmacoreGDNode){ $this.value->$method_name() };
      return result

    method query_string<<$method_name>>()->String
      local result : String
      native @|if ($this.value) $result = RogueString_create( ((godot::String)$this.value->$method_name()).utf8().get_data() );
      return result

    method exists->Logical
      return native("!!$this.value")->Logical
endClass

#{
class GDNode( gd_node:NativeGDNode, type:GDNodeType ) [compound]
  GLOBAL METHODS
    method create( gd_node:NativeGDNode )->GDNode
      if (not gd_node.exists) return GDNode( gd_node, GDNodeType )

      local type = GDNodeType
      if (instance_of<<Sprite3D>>(gd_node))   type = GDNodeTypeSprite3D
      elseIf (instance_of<<Node3D>>(gd_node)) type = GDNodeTypeNode3D

      return GDNode( gd_node, type )

    method create<<$ClassName>>->GDNode
      local gd_node : NativeGDNode
      native @|$gd_node = memnew($ClassName)
      return GDNode( gd_node )

    method instance_of<<$GodotType>>( gd_node:NativeGDNode )->Logical
      local result : Logical
      native @|$result = !!godot::Object::cast_to<godot::$GodotType>( $gd_node.value );
      return result

  METHODS
    method cloned->GDNode
      if (not gd_node.exists) return this

      local result : NativeGDNode
      native @|$result = (NativeGDNode){ $gd_node.value->duplicate() };
      return GDNode( result, type )

    method add( child:GDNode )
      native @|$gd_node.value->add_child( $child.gd_node.value );

    method class_name->String
      local result : String
      native @|$result = RogueString_create( $gd_node.value->get_class().utf8().get_data() );
      return result

    method count->Int32
      local result : Int32
      native @|$result = $gd_node.value->get_child_count();
      return result

    method filepath->String
      local result : String
      native @|$result = RogueString_create( $gd_node.value->get_scene_file_path().utf8().get_data() );
      return result

    method get( index:Int32 )->GDNode
      local child : NativeGDNode
      native @|$child = (NativeGDNode){ $gd_node.value->get_child( $index ) };
      return GDNode( child )

    method get( node_path:String )->GDNode
      local result : NativeGDNode
      if (gd_node.exists)
        native @|godot::NodePath path( $node_path->data->as_utf8 );
                |$result = (NativeGDNode){ $gd_node.value->get_node_or_null( path ) };
      endIf
      return GDNode( result )

    method instance_of<<$GodotType>>->Logical
      local result : Logical
      native @|$result = !!godot::Object::cast_to<godot::$GodotType>( $gd_node.value );
      return result

    method last->GDNode
      return this[ count-1 ]

    method name->String
      local result : String
      native @|$result = RogueString_create( ((godot::String)$gd_node.value->get_name()).utf8().get_data() );
      return result

    method operator?->Logical
      return gd_node.exists

    method remove( child:GDNode )
      native @|$gd_node.value->remove_child( $child.gd_node.value );

    method queue_free
      if (not gd_node.exists) return
      native @|$gd_node.value->queue_free() };

    method set_name( new_name:String )
      native @|String new_name( $new_name );
              |$gd_node.value->set_name( new_name );

    method set_pixel_scale( scale:Real )
      trace
      type.set_pixel_scale( gd_node, scale )

    method set_position( xy:RealXY )
      type.set_position( gd_node, xy )

    method set_rotation( z:Real )
      set_rotation( XYZ(0,0,z) )

    method set_rotation( xyz:XYZ )
      type.set_rotation( gd_node, xyz )

    method set_scale( xy:RealXY )
      type.set_scale( gd_node, xy )

    method set_visible( setting:Logical )
      type.set_visible( gd_node, setting )

    method texture->GDRef
      return type.texture( gd_node )

    method to->String
      return type->String( gd_node )

endClass

class GDNodeType [singleton]
  METHODS
    method set_pixel_scale( gd_node:NativeGDNode, scale:Real )
      trace
      noAction

    method set_position( gd_node:NativeGDNode, xy:RealXY )
      noAction

    method set_rotation( gd_node:NativeGDNode, xyz:XYZ )
      noAction

    method set_scale( gd_node:NativeGDNode, xy:RealXY )
      noAction

    method set_visible( gd_node:NativeGDNode, setting:Logical )
      noAction

    method texture( gd_node:NativeGDNode )->GDRef
      return GDRef(NativeGDRef())

    method to->String( gd_node:NativeGDNode )
      return GDNode( gd_node, this ).name

endClass

class GDNodeTypeNode3D : GDNodeType [singleton]
  METHODS
    method set_position( gd_node:NativeGDNode, xy:RealXY )
      local z = Plasmacore.nominal_z
      native
        @|godot::Vector3 position( (float)$xy.x, (float)$xy.y, (float)$z );
         |godot::Object::cast_to<godot::Node3D>( $gd_node.value )->set_position( position );

    method set_rotation( gd_node:NativeGDNode, xyz:XYZ )
      native
        @|godot::Vector3 rotation( (float)$xyz.x, (float)$xyz.y, (float)$xyz.z );
         |godot::Object::cast_to<godot::Node3D>( $gd_node.value )->set_rotation( rotation );

    method set_scale( gd_node:NativeGDNode, xy:RealXY )
      local z = which{ xy.x==xy.y:xy.x || 1.0 }
      native
        @|godot::Vector3 scale( (float)$xy.x, (float)$xy.y, (float)$z );
         |godot::Object::cast_to<godot::Node3D>( $gd_node.value )->set_scale( scale );

    method set_visible( gd_node:NativeGDNode, setting:Logical )
      native
        @|godot::Object::cast_to<godot::Node3D>( $gd_node.value )->set_visible( $setting );
      noAction
endClass

class GDNodeTypeSprite3D : GDNodeTypeNode3D [singleton]
  METHODS
    method set_pixel_scale( gd_node:NativeGDNode, scale:Real )
      trace
      native @|godot::Object::cast_to<godot::Sprite3D>( $gd_node.value )->set_pixel_size( (float)$scale );

    method texture( gd_node:NativeGDNode )->GDRef
      local native_ref : NativeGDRef
      native @|godot::Ref<godot::Texture2D> ref = godot::Object::cast_to<godot::Sprite3D>( $gd_node.value )->get_texture();
      native @|$native_ref = (NativeGDRef){ ref.ptr() };
      return GDRef( native_ref, GDRefTypeTexture2D )
endClass
}#
