module Plasmacore

class GDNode [compound]
#{
  GLOBAL METHODS
    method create<<$ClassName>>->GDNode
      local result : GDNode
      native @|$result = ROGUE_COMPOUND(PlasmacoreGDNode) { memnew(godot::$ClassName) };
      return result

    method operator?( obj:GDNode )->Logical
      return obj.exists

  PROPERTIES
    native "godot::Node* value;"

  METHODS
    method cloned->GDNode
      return query_node<<duplicate>>

    method add( child:GDNode )
      invoke<<add_child>>( child )

    method call( gd_method_name:String, args=undefined:Value )->Value
      local result = undefined
      local gd_result : GDVariantPointer
      if (args.is_list)
        local array_pointer : GDArrayPointer
        native
          @|if ($this.value)
           |{
           |  godot::StringName method_name( $gd_method_name->data->as_utf8 );
           |  godot::Array args;
           |  $array_pointer = ROGUE_COMPOUND(GDArrayPointer) { &args };
              GDUtility.list_to_array( args, array_pointer )
        native
          @|  godot::Variant result = $this.value->callv( method_name, args );
           |  $gd_result = ROGUE_COMPOUND(GDVariantPointer) { &result };
              return GDUtility.variant_to_value( gd_result )
        native
          @|}
      else
        local variant_pointer : GDVariantPointer
        native @|godot::Variant arg;
                |$variant_pointer = ROGUE_COMPOUND(GDVariantPointer) { &arg };
        GDUtility.value_to_variant( args, variant_pointer )
        native
          @|if ($this.value)
           |{
           |  godot::StringName method_name( $gd_method_name->data->as_utf8 );
           |  godot::Variant result = $this.value->call( method_name, arg );
           |  $gd_result = ROGUE_COMPOUND(GDVariantPointer) { &result };
              return GDUtility.variant_to_value( gd_result )
        native
          @|}
      endIf
      return result

    method count->Int32
      return query_int32<<get_child_count>>

    method exists->Logical
      return native("!!$this.value")->Logical

    method filepath->String
      return query_string<<get_file_path>>

    method has_method( name:String )->Logical
      return query_logical<<has_method>>( name )

    method name->String
      return query_string<<get_name>>

    method get( index:Int32 )->GDNode
      local result : GDNode
      native @|if ($this.value) $result = ROGUE_COMPOUND(PlasmacoreGDNode) { $this.value->get_child($index) };
      return result

    method get( node_path:String )->GDNode
      local result : GDNode
      if (this.exists)
        native @|godot::NodePath path( $node_path->data->as_utf8 );
                |$result = ROGUE_COMPOUND(PlasmacoreGDNode) { $this.value->get_node_or_null( path ) };
      endIf
      return result

    method instance_of<<$GodotType>>->Logical
      local result : Logical
      native @|if ($this.value) $result = !!godot::Object::cast_to<godot::$GodotType>( $this.value );
      return result

    method meta( name:String )->Value
      return query_value<<get_meta>>( name )

    method last->GDNode
      return this[ count-1 ]

    method set_name( new_name:String )
      invoke_with_string<<set_name>>( new_name )

    method set_pixel_scale( scale:Real )
      invoke<<Sprite3D,set_pixel_size>>( scale )

    method set_position( xy:XY )
      invoke<<Node2D,set_position>>( xy->RealXY )
      invoke<<Node3D,set_position>>( XYZ(xy,0) )

    method set_rotation( radians:Radians )
      invoke<<Node2D,set_rotation>>( radians.value )
      invoke<<Node3D,set_rotation>>( XYZ(0,0,radians.value) )

    method set_scale( scale:Real )
      invoke<<Node2D,set_scale>>( RealXY(scale,scale) )
      invoke<<Node3D,set_scale>>( XYZ(scale,scale,scale) )

    method set_scale( scale:RealXY )
      invoke<<Node2D,set_scale>>( scale )
      invoke<<Node3D,set_scale>>( XYZ(scale,1.0) )

    method set_visible( setting:Logical )
      invoke<<Node2D,set_visible>>( setting )
      invoke<<Node3D,set_visible>>( setting )

    method sprite_frames->GDObject
      return query_object<<AnimatedSprite2D,get_sprite_frames>>

    method to->String
      if (not this.exists) return "null"
      return name

    method invoke<<$GodotType,$method_name>>( value:Logical )
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node) node->$method_name( $value );
              |}

    method invoke<<$method_name>>( new_value:GDNode )
      native @|if ($this.value)
              |{
              |  if ($this.value) $this.value->$method_name( $new_value.value );
              |}

    method invoke<<$GodotType,$method_name>>( new_value:GDNode )
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node) node->$method_name( $new_value.value );
              |}

    method invoke<<$GodotType,$method_name>>( value:Real )
      if (not this) return
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node) node->$method_name( $value );
              |}

    method invoke_with_string<<$method_name>>( arg:String )
      native @|if ($this.value)
              |{
              |  godot::String arg( $arg->data->as_utf8 );
              |  $this.value->$method_name( arg );
              |}

    method invoke_with_string_name<<$method_name>>( arg:String )
      native @|if ($this.value)
              |{
              |  godot::StringName arg( $arg->data->as_utf8 );
              |  $this.value->$method_name( arg );
              |}

    method invoke<<$GodotType,$method_name>>( xy:RealXY )
      if (not this) return
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node)
              |  {
              |    godot::Vector2 value( $xy.x, $xy.y );
              |    node->$method_name( value );
              |  }
              |}

    method invoke<<$GodotType,$method_name>>( xyz:XYZ )
      if (not this) return
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node)
              |  {
              |    godot::Vector3 value( $xyz.x, $xyz.y, $xyz.z );
              |    node->$method_name( value );
              |  }
              |}

    method query_int32<<$method_name>>()->Int32
      local result : Int32
      native @|if ($this.value) $result = $this.value->$method_name();
      return result

    method query_int32<<$GodotType,$method_name>>()->Int32
      local result : Int32
      native @|godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |if (node) $result = node->$method_name();
      return result

    method query_node<<$method_name>>()->GDNode
      local result : GDNode
      native @|if ($this.value) $result = ROGUE_COMPOUND(PlasmacoreGDNode) { $this.value->$method_name() };
      return result

    method query_object<<$method_name>>()->GDObject
      local result : GDObject
      native @|if ($this.value) $result = ROGUE_COMPOUND(PlasmacoreGDObject) { $this.value->$method_name().ptr() };
      return result

    method query_object<<$GodotType,$method_name>>->GDObject
      local result : GDObject
      native @|if ($this.value)
              |{
              |  godot::$GodotType* node = godot::Object::cast_to<godot::$GodotType>( $this.value );
              |  if (node)
              |  {
              |    $result = ROGUE_COMPOUND(PlasmacoreGDObject) { node->$method_name().ptr() };
              |  }
              |}
      return result

    method query_logical<<$method_name>>( arg:String )->Logical
      local result : Logical
      native @|if ($this.value)
              |{
              |  godot::StringName arg( $arg->data->as_utf8 );
              |  $result = $this.value->$method_name( arg );
              |}
      return result

    method query_string<<$method_name>>()->String
      local result : String
      native @|if ($this.value) $result = RogueString_create( ((godot::String)$this.value->$method_name()).utf8().get_data() );
      return result

    method query_value<<$method_name>>( arg:String )->Value
      local result : Value
      local v_pointer : GDVariantPointer
      native @|if ($this.value)
              |{
              |  godot::StringName arg( $arg->data->as_utf8 );
              |  godot::Variant result = $this.value->$method_name( arg );
              |  godot::UtilityFunctions::print( "META:" );
              |  godot::UtilityFunctions::print( result );
              |  GDVariantPointer v_pointer = ROGUE_COMPOUND(GDVariantPointer) { &result };
                 result = GDUtility.variant_to_value( v_pointer )
      native @|}
      return result
}#

endClass
