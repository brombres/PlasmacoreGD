module Plasmacore

uses Geometry [export]
uses Math/Best

$include Plasmacore/Display
$include Plasmacore/Godot
$include Plasmacore/Drawable

class Plasmacore [essential api singleton]
  PROPERTIES
    gd_root_node      : GDObject
    gd_scene_node     : GDObject
    gd_config_node    : GDObject
    gd_assets_node    : GDObject
    gd_drawables_node : GDObject

    is_2d  : Logical
    is_2dx : Logical
    is_3d  : Logical

    drawable : Drawable
    #d2 : Drawable

  METHODS
    method init
      Global.output = Log
      Global.error = ErrorLog

    method draw
      if (drawable)
        drawable.draw( XY(100,100) )
        #d2.draw( XY(300,100) )
      endIf

    method on_new_scene( mode:Int32, gd_root_node, gd_config_node )
      is_2dx = (mode == 1)
      is_2d = (mode == 2)
      is_3d = (mode == 3)

      gd_scene_node  = gd_root_node.last
      gd_assets_node = gd_config_node//Assets
      if (gd_assets_node) gd_drawables_node = gd_assets_node//Drawables

      #drawable = Drawable( "Sand" )
      #drawable.node( "set_variation", 7 )

      #d2 = drawable.cloned

    method on_update( dt:Real64, display_size:XY )
      Display.size = display_size

      draw
endClass
