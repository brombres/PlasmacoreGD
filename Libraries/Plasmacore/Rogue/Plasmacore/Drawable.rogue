module Plasmacore

class Drawable
  GLOBAL METHODS
    method create( name:String )->Drawable
      local existing = Plasmacore.drawables_lookup.find( name )
      if (existing) return existing.value

      local node : GDNode

      contingent
        if (Plasmacore.gd_drawables) node = Plasmacore.gd_drawables[name]
        sufficient (node)

        if (Plasmacore.gd_assets) node = Plasmacore.gd_assets[name]
        sufficient (node)

        if (Plasmacore.gd_config) node = Plasmacore.gd_config[name]
        sufficient (node)

        node = Plasmacore.gd_scene[name]
      endContingent

      local drawable = Drawable( node, Plasmacore.drawables_list.count )
      Plasmacore.drawables_list.add( drawable )
      Plasmacore.drawables_lookup[ name ] = drawable

      return drawable

  PROPERTIES
    subtree       : GDNode
    template_node : GDNode

    hidden = GDNode[]
    ready  = GDNode[]
    drawn  = GDNode[]

  METHODS
    method init( template_node, subtree_index:Int32 )
      template_node.pixel_scale = 1.0  # only affects Sprite3D

      if (Plasmacore.is_2d) subtree = GDNode.create<<Node2D>>
      else                  subtree = GDNode.create<<Node3D>>
      subtree.name = "Instances_$"(subtree_index)
      Plasmacore.gd_config.add( subtree )

    method draw( position:RealXY, scale=RealXY(1,1):RealXY, rotation=Radians(0):Radians )
      local node : GDNode
      if (ready.count)
        node = ready.remove_last
      elseIf (hidden.count)
        node = hidden.remove_last
        node.visible = true
      else
        trace
        node = template_node.cloned
        subtree.add( node )
        node.visible = true
      endIf

      if (Plasmacore.is_2dx)
        node.position = RealXY( position.x, Display.size.y - position.y )
      else
        node.position = position
      endIf
      node.scale = scale
      node.rotation = rotation.value

      drawn.add( node )

    method on_finished_drawing
      loop (ready.count) hidden.add( ready.remove_last.[ visible=false ] )
      loop (drawn.count) ready.add( drawn.remove_last )

endClass
