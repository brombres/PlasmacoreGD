module Plasmacore

class Drawable
  GLOBAL METHODS
    method create( name:String )->Drawable
      local existing = Plasmacore.drawables_lookup.find( name )
      if (existing) return existing.value

      local node : GDNode

      contingent
        if (Plasmacore.gd_drawables) node = Plasmacore.gd_drawables[name]
        sufficient (node)

        if (Plasmacore.gd_assets) node = Plasmacore.gd_assets[name]
        sufficient (node)

        node = Plasmacore.gd_scene[name]
      endContingent

      local drawable = Drawable( node )
      Plasmacore.drawables_list.add( drawable )
      Plasmacore.drawables_lookup[ name ] = drawable

      return drawable

  PROPERTIES
    template_node : GDNode

    hidden = GDNode[]
    ready  = GDNode[]
    drawn  = GDNode[]

  METHODS
    method init( template_node )
      template_node.pixel_scale = 1.0  # only affects Sprite3D

    method draw( position:RealXY, scale=RealXY(1,1):RealXY, rotation=Radians(0):Radians )
      local node : GDNode
      if (ready.count)
        node = ready.remove_last
      elseIf (hidden.count)
        node = hidden.remove_last
        node.visible = true
      else
        node = template_node.cloned
        Plasmacore.gd_scene.add( node )
        node.visible = true
      endIf
      node.position = position
      node.scale = scale
      node.rotation = rotation.value
      drawn.add( node )

    method on_finished_drawing
      loop (ready.count) hidden.add( ready.remove_last.[ visible=false ] )
      loop (drawn.count) ready.add( drawn.remove_last )

endClass
