module Plasmacore

uses Geometry [export]
uses Math/Best

$include Plasmacore/App
$include Plasmacore/Display
$include Plasmacore/Drawable
$include Plasmacore/Godot
$include Plasmacore/ScreenState

class Plasmacore [essential api singleton]
  PROPERTIES
    gd_root      : GDObject
    gd_scene     : GDObject
    gd_config    : GDObject
    gd_assets    : GDObject
    gd_drawables : GDObject

    is_2d  : Logical
    is_2dx : Logical
    is_3d  : Logical

    tile_length = 8.0
    terrain : Drawable[]
    tiles_high : Int32
    tiles_wide : Int32

  METHODS
    method init
      Global.output = Log
      Global.error = ErrorLog

    method draw
      Drawable.next_z_index = 1
      if (terrain)
        (forEach in terrain).draw
      endIf

    method on_new_scene( mode:Int32, gd_root, gd_config )
      is_2dx = (mode == 1)
      is_2d = (mode == 2)
      is_3d = (mode == 3)

      gd_scene  = gd_root.last
      gd_assets = gd_config//Assets
      if (gd_assets) gd_drawables = gd_assets//Drawables

    method on_update( dt:Real64, display_size:XY )
      Display.size = display_size

      if (not terrain)
        tiles_wide = 20
        tiles_high = 11
        terrain = Drawable[]( tiles_wide * tiles_high )
        loop (tiles_wide*tiles_high) terrain.add( Drawable("Sand") )
      endIf

      forEach (j in 0..<tiles_high)
        forEach (i in 0..<tiles_wide)
          local sand = terrain[j*tiles_wide+i]
          local len = tile_length->Int32
          sand.position = XY(i,j) * len + XY(len)/2
          sand.scale = len->Real64 / RealXY(sand.base_size)
        endForEach
      endForEach

      tile_length *= 1.01

      draw
endClass
