module Plasmacore

uses Control/State

class ScreenState : State<<ScreenState>> [singleton]
  # Primary overrideable methods:
  # method on_start
  # method on_finish
  # method on_update
  GLOBAL PROPERTIES
    dt : Real64

  PROPERTIES
    _graphics = Graphic[]

  METHODS
    method graphic( name:String )->Graphic
      # Loads a Graphic while adding it to an internal list where the Graphic is automatically
      # deleted when the ScreenState changes.
      local result = Graphic( name )
      _graphics.add( result )
      return result

    method get( name:String )->Graphic
      # Allows state//DName <-> state.graphic("DName")
      return graphic( name )

    method on_draw
      noAction

    method after_draw
      noAction

    method on_scene_change
      # Plasmacore.gd_scene can be queried for .name and .filepath
      noAction

    method update( _dt:Real )
      dt = _dt
      ScreenState = this.updated

    method updated->ScreenState [override]
      local result = prior.updated
      if (not result) result = ScreenState()
      return result

    method _handle_finish [override]
      on_finish
      (forEach in _graphics).delete
      _graphics.clear

endClass
