module Plasmacore

class Graphic [essential]
  PROPERTIES
    node      : GDObject

    draw_list : GDObject[]
    draw_pool : GDObject[]

    position : XYZ
    scale    = XYZ(1,1,1)
    rotation : XYZ

    base_size  = XYZ(1,1,1)
    base_scale = XYZ(1,1,1)

    is_singleton : Logical
    is_actively_drawing : Logical

  GLOBAL METHODS
    method create( name:String )->Graphic
      local entry = Graphics.singletons.find( name )
      if (entry) return entry.value

      entry = Graphics.clonables.find( name )
      if (entry) return entry.value.cloned

      if (name.begins_with("res://"))
        local result = Graphic( GDObject.load_scene(name) )
        Graphics.clonables[ name ] = result
        Plasmacore.gd_graphics.add( result.node )
        return result

      else
        local node : GDObject

        contingent
          if (Plasmacore.gd_assets_graphics) node = Plasmacore.gd_assets_graphics[name]
          sufficient (node)

          if (Plasmacore.gd_assets) node = Plasmacore.gd_assets[name]
          necessary (node)

        satisfied
          local result = Graphic( node )
          Graphics.clonables[ name ] = result
          Plasmacore.gd_graphics.add( node )
          return result

        unsatisfied
          node = Plasmacore.gd_scene[name]
          if (node)
            local result = Graphic( node )
            Graphics.singletons[ name ] = result
            result.is_singleton = true
            return result
          endIf

        endContingent

        return Graphic( node )  # undefined graphic
      endIf

  METHODS
    method init( node )
      if (node)
        base_size = find_base_size
      endIf
      Graphics.loaded.add( this )

    method init( existing:Graphic )
      this.node = existing.node.cloned
      this.@position = existing.position
      this.@scale = existing.scale
      this.@rotation = existing.rotation
      this.base_size = existing.base_size
      this.base_scale = existing.base_scale
      existing.node.parent.add( this.node )
      Graphics.loaded.add( this )

    method cloned->Graphic
      return Graphic( this )

    method on_cleanup
      delete

    method add( child:Graphic )
      node.add( child.node )

    method find_base_size->XYZ
      if (node.has_method("get_size"))
        local size = node( "get_size" )
        if (size.is_xyz) return size
        else             return XYZ( size->XY, 1 )
      endIf

      if (node.has_meta("size"))
        local size = node.meta( "size" )
        if (size.is_xyz) return size
        else             return XYZ( size->XY, 1 )
      endIf

      if local frames = node.sprite_frames
        if local frame = frames.texture("default",0)
          return XYZ( frame.size, 1 )
        endIf
      endIf

      return XYZ(1,1,1)

    method delete
      if (node)
        if (not is_singleton)
          if (node.parent)
            node.parent.remove( node )
          endIf
          node.delete
        endIf
        node = GDObject()
      endIf

    method draw( position:XY, rotation=Radians(0):Radians, scale=XY(1,1):XY )
      local copy : GDObject

      if (draw_pool and draw_pool.count)
        copy = draw_pool.remove_last
      else
        copy = node.cloned( node.parent )
        copy.visible = true
      endIf

      if (Plasmacore.is_2dx)
        copy.position = XYZ( position.x, Display.size.y - position.y )
      else
        copy.position = position
      endIf

      copy.scale = base_scale * scale
      copy.rotation = rotation.value

      if (Plasmacore.is_2d)
        copy.z_index = Graphics.next_z_index
        ++Graphics.next_z_index
      endIf

      if (not draw_list)
        ensure<<draw_list>>
        ensure<<draw_pool>>
      endIf
      if (not is_actively_drawing)
        is_actively_drawing = true
        Graphics.actively_drawing.add( this )
      endIf
      draw_list.add( copy )

    method get( name:String )->Graphic
      return Graphic( node[name] )

    method is_visible->Logical
      return node.is_visible

    method present
      if (Plasmacore.is_2d)
        node.z_index = Graphics.next_z_index
        ++Graphics.next_z_index
      endIf

    method present( position:IntXY )
      this.position = position
      present

    method present( position:XY )
      this.position = position
      present

    method present( position )
      present

    method set_bounds( box:Box )
      position = box.center
      size = box.size

    method set_is_visible( setting:Logical )
      node.visible = setting

    method set_base_size( @base_size )

    method set_base_size( xy:XY )
      @base_size = XYZ( xy, 1 )

    method set_position( xy:IntXY )
      set_position( xy->XY )

    method set_position( xy:XY )
      @position = XYZ( xy, position.z )
      if (Plasmacore.is_2dx)
        node.position = XYZ( xy.x, Display.size.y - xy.y, position.z )
      else
        node.position = xy
      endIf

    method set_position( xyz:XYZ )
      @position = xyz
      if (Plasmacore.is_2dx)
        node.position = XYZ( xyz.x, Display.size.y - xyz.y, xyz.z )
      else
        node.position = xyz
      endIf

    method set_rotation( z:Radians )
      if (Plasmacore.is_2d) rotation = z
      else                  rotation = XYZ( 0, 0, z )

    method set_rotation( @rotation )
      node.rotation = rotation

    method set_scale( s:Real64 )
      if (Plasmacore.is_2d) scale = XY( s, s )
      else                  scale = XYZ( s, s, s )

    method set_scale( xy:XY )
      @scale = XYZ( xy, scale.z )
      node.scale = (base_scale * scale)->XY

    method set_scale( @scale )
      node.scale = base_scale * scale

    method set_size( sz:Real64 )
      base_scale = XYZ(sz,sz,sz) / base_size

    method set_size( xy:IntXY )
      base_scale = XYZ(xy->XY,1) / base_size

    method set_size( xy:XY )
      base_scale = XYZ(xy,1) / base_size

    method set_size( xyz:XYZ )
      base_scale = xyz / base_size

    method to->String
      if (node) return node.name
      return "(Undefined Graphic)"
endClass
