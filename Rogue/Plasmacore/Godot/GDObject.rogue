module Plasmacore

ROGUE_NATIVE_POINTER_TYPE<<"godot::Object*",GDObject>>

augment Rogue::GDObject
  METHODS
    method cloned->GDObject
      return query<<"Node",duplicate>>

    method add( child:GDObject )
      call<<"Node",add_child,"Node">>( child )

    method call( method_name:String, args=undefined:Value )->Value
      if (not this) return undefined

      local v_name = GDVariant( method_name )

      if (args.is_list)
        local v_args = GDVariant( args )
        return native( "ROGUE_COMPOUND(GDVariant){ $this.value->callv($v_name.value, $v_args.value) }" )->GDVariant
      else
        local v_arg = GDVariant( args )
        return native( "ROGUE_COMPOUND(GDVariant){ $this.value->call($v_name.value, $v_arg.value) }" )->GDVariant
      endIf

    method class_name->String
      return query<<"Object",get_class>>->String

    method count->Int32
      return query<<"Node",get_child_count>>->String

    method delete
      call<<"Node",queue_free>>

    method filepath->String
      return query<<"Node",get_file_path>>

    method get( index:Int32 )->GDObject
      return query<<"Node",get_child>>( index )->GDObject

    method get( node_path:String )->GDObject
      return query<<"Node",get_node_or_null>>( node_path )->GDObject

    method has_method( name:String )->Logical
      return query<<"Object",has_method>>

    method instance_of<<$GodotType>>->Logical
      local result : Logical
      native @|if ($this.value) $result = !!godot::Object::cast_to<godot::$GodotType>( $this.value );
      return result

    method meta( name:String )->Value
      return query<<"Object",get_meta>>( name )

    method last->GDObject
      return this[ count - 1 ]

    method name->String
      return query<<"Node",get_name>>

    method parent->GDObject
      return query<<"Node",get_parent>>

    method remove( child:GDObject )
      call<<"Node",remove_child, "Node">>( child )

    method set_name( new_name:String )
      call<<"Node",set_name>>( new_name )

    method set_pixel_scale( scale:Real )
      call<<"Sprite3D",set_pixel_size>>( scale )

    method set_position( xy:XY )
      call<<"Node2D",set_position>>( xy->RealXY )
      call<<"Node3D",set_position>>( XYZ(xy,0) )

    method set_position( xy:RealXY )
      call<<"Node2D",set_position>>( xy )
      call<<"Node3D",set_position>>( XYZ(xy,0) )

    method set_position( xyz:XYZ )
      call<<"Node2D",set_position>>( xyz->RealXY )
      call<<"Node3D",set_position>>( xyz )

    method set_rotation( radians:Radians )
      call<<"Node2D",set_rotation>>( radians )
      call<<"Node3D",set_rotation>>( XYZ(0,0,radians) )

    method set_rotation( radians:XYZ )
      call<<"Node2D",set_rotation>>( radians.z )
      call<<"Node3D",set_rotation>>( radians )

    method set_scale( scale:Real )
      call<<"Node2D",set_scale>>( RealXY(scale,scale) )
      call<<"Node3D",set_scale>>( XYZ(scale,scale,scale) )

    method set_scale( scale:RealXY )
      call<<"Node2D",set_scale>>( scale )
      call<<"Node3D",set_scale>>( XYZ(scale,1.0) )

    method set_visible( setting:Logical )
      call<<"Node2D",set_visible>>( setting )
      call<<"Node3D",set_visible>>( setting )

    method set_z_index( value:Int32 )
      call<<"Node2D",set_z_index>>( value )

    method size->XY
      if (this.instance_of<<"Texture2D">>) return query<<"Texture2D",get_size>>
      return XY(0,0)

    method sprite_frames->GDObject
      return query<<"AnimatedSprite2D",get_sprite_frames>>

    method texture( animation_name:String, index:Int32 )->GDObject
      return query<<"SpriteFrames",get_frame_texture>>( animation_name, index )

    method to->String
      return name

    method call<<$GodotType,$method_name>>
      native
        @|if ($this.value)
         |{
         |  godot::$GodotType* obj = godot::Object::cast_to<godot::$GodotType>( $this.value );
         |  if (obj) obj->$method_name();
         |}

    method call<<$GodotType,$method_name>>( arg:Value )
      local v_arg = GDVariant( arg )
      native
        @|if ($this.value)
         |{
         |  godot::$GodotType* obj = godot::Object::cast_to<godot::$GodotType>( $this.value );
         |  if (obj) obj->$method_name( $v_arg.value );
         |}

    method call<<$GodotType,$method_name,$GodotArgType>>( arg:Value )
      local v_arg = GDVariant( arg )
      native
        @|if ($this.value)
         |{
         |  godot::$GodotType* obj = godot::Object::cast_to<godot::$GodotType>( $this.value );
         |  godot::$GodotArgType* arg = godot::Object::cast_to<godot::$GodotArgType>( (godot::Object*)($v_arg.value) );
         |  if (obj) obj->$method_name( arg );
         |}

    method call<<$GodotType,$method_name>>( arg1:Value, arg2:Value )
      local v_arg1 = GDVariant( arg1 )
      local v_arg2 = GDVariant( arg2 )

      native
        @|if ($this.value)
         |{
         |  godot::$GodotType* obj = godot::Object::cast_to<godot::$GodotType>( $this.value );
         |  if (obj) obj->$method_name( $v_arg1.value, $v_arg2.value );
         |}

    method query<<$GodotType,$method_name>>->Value
      local v_result : GDVariant

      native
        @|if ($this.value)
         |{
         |  godot::$GodotType* obj = godot::Object::cast_to<godot::$GodotType>( $this.value );
         |  if (obj)
         |  {
         |    $v_result.value = obj->$method_name();
         |  }
         |}

      return v_result->Value

    method query<<$GodotType,$method_name>>( arg:Value )->Value
      local v_result : GDVariant
      local v_arg = GDVariant( arg )

      native
        @|if ($this.value)
         |{
         |  godot::$GodotType* obj = godot::Object::cast_to<godot::$GodotType>( $this.value );
         |  if (obj)
         |  {
         |    $v_result.value = obj->$method_name( $v_arg.value );
         |  }
         |}

      return v_result->Value

    method query<<$GodotType,$method_name>>( arg1:Value, arg2:Value )->Value
      local v_result : GDVariant
      local v_arg1 = GDVariant( arg1 )
      local v_arg2 = GDVariant( arg2 )

      native
        @|if ($this.value)
         |{
         |  godot::$GodotType* obj = godot::Object::cast_to<godot::$GodotType>( $this.value );
         |  if (obj)
         |  {
         |    $v_result.value = obj->$method_name( $v_arg1.value, $v_arg2.value );
         |  }
         |}

      return v_result->Value

endAugment


augment Rogue::Value
  GLOBAL METHODS
    method create( obj:GDObject )->Value
      return Value( Boxed<<GDObject>>(obj) )

  METHODS
    method to->GDObject
      if (type == Value.TYPE_OBJECT)
        if local boxed_obj = this->Object->(as Boxed<<GDObject>>)
          return boxed_obj.value
        endIf
      endIf
      return GDObject()
endAugment

