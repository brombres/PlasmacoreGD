module RogueGD

class View [singleton]
  PROPERTIES
    args       : GDVariant
    view_node  : GDObject
    state      = ViewState()

  METHODS
    method init_object
      if (this not isType View)
        # Only extended classes get registered
        RogueGD.register( this )
      endIf

    method activate
			View = this
      ViewState = state
      Display.size = view_node["/root"].visible_bounds.size

    method bounds->Box
      return Box( view_node.control_position, view_node.control_size )

    method configure( args )->GDVariant
      view_node = args[0]
      ViewState.on_configure
      on_configure
      ViewState.after_configure

      return $defaultValue<<GDVariant>>

    method draw( args )->GDVariant
      view_node = args[0]
      return $defaultValue<<GDVariant>>

    method on_configure
      noAction

    method on_update
      noAction

    method position->XY
      return view_node.control_position

    method set_view_node( @view_node )
      activate

    method size->XY
      return view_node.control_size

    method update( args )->GDVariant
      view_node = args[0]
      Display.dt = args[1]

      ViewState.update
      state = ViewState
      View.on_update
      ViewState.after_update

      return $defaultValue<<GDVariant>>

endClass
