module RogueGD

NATIVE_POINTER_TYPE<<GDArrayPointer,   "godot::Array*">>
NATIVE_POINTER_TYPE<<GDVariantPointer, "godot::Variant*">>

class GDUtility [singleton]
  METHODS
    method list_to_array( list:Value, array:GDArrayPointer )
      forEach (value in list)
        local variant_pointer : GDVariantPointer
        native @|godot::Variant variant;
                |$variant_pointer = (GDVariantPointer){ &variant };
        value_to_variant( value, variant_pointer );
        native @|$array.value->push_back( variant );
      endForEach

    method value_to_variant( value:Value, variant:GDVariantPointer )
      which (value.type)
        case Value.TYPE_UNDEFINED, Value.TYPE_NULL, Value.TYPE_OBJECT
          return
        case Value.TYPE_BYTE, Value.TYPE_CHARACTER, Value.TYPE_INT32, Value.TYPE_INT64
          local value = value->Int32
          native @|*($variant.value) = $value;
        case Value.TYPE_REAL32, Value.TYPE_REAL64
          local value = value->Real64
          native @|*($variant.value) = $value;
        case Value.TYPE_LOGICAL
          if (value->Logical) native @|*($variant.value) = (bool) 1;
          else                native @|*($variant.value) = (bool) 0;
        case Value.TYPE_XY
          local value = value->IntXY
          native @|*($variant.value) = godot::Vector2i($value.x,$value.y);
        case Value.TYPE_BOX
          local value = value->Box
          native @|*($variant.value) = godot::Rect2i( $value.position.x, $value.position.y, $value.size.x, $value.size.y );
        case Value.TYPE_STRING
          local value = value->String
          native @|godot::String st( $value->data->as_utf8 );
                  |*($variant.value) = st;
        case Value.TYPE_LIST, Value.TYPE_TABLE
          # TODO - maybe?
          return
      endWhich

    method variant_to_value( variant:GDVariantPointer )->Value
      if (not variant.exists) return undefined

      local type : Int32
      native @|$type = (RogueInt32) $variant.value->get_type();

      local result_string : String
      native @|switch ( $variant.value->get_type() )
              |{
              |  case godot::Variant::Type::NIL:
              |  {
                   return undefined
      native @|  }
              |  case godot::Variant::Type::BOOL:
              |  {
                   return native("(bool)*($variant.value)")->Logical
      native @|  }
              |  case godot::Variant::Type::INT:
              |  {
                   return native("(int64_t)*($variant.value)")->Int64
      native @|  }
              |  case godot::Variant::Type::FLOAT:
              |  {
                   return native("(double)*($variant.value)")->Real64
      native @|  }
              |  case godot::Variant::Type::STRING:
              |  {
              |    godot::String st = *($variant.value);
              |    $result_string = RogueString_create( st.utf8().get_data() );
                   return result_string

      native @|  }
              |  case godot::Variant::Type::VECTOR2:
              |  case godot::Variant::Type::VECTOR2I:
              |  case godot::Variant::Type::RECT2:
              |  case godot::Variant::Type::RECT2I:
              |  case godot::Variant::Type::VECTOR3:
              |  case godot::Variant::Type::VECTOR3I:
              |  case godot::Variant::Type::TRANSFORM2D:
              |  case godot::Variant::Type::VECTOR4:
              |  case godot::Variant::Type::VECTOR4I:
              |  case godot::Variant::Type::PLANE:
              |  case godot::Variant::Type::QUATERNION:
              |  case godot::Variant::Type::AABB:
              |  case godot::Variant::Type::BASIS:
              |  case godot::Variant::Type::TRANSFORM3D:
              |  case godot::Variant::Type::PROJECTION:
              |
              |  case godot::Variant::Type::COLOR:
              |  case godot::Variant::Type::STRING_NAME:
              |  case godot::Variant::Type::NODE_PATH:
              |  case godot::Variant::Type::RID:
              |  case godot::Variant::Type::OBJECT:
              |  case godot::Variant::Type::CALLABLE:
              |  case godot::Variant::Type::SIGNAL:
              |  case godot::Variant::Type::DICTIONARY:
              |  case godot::Variant::Type::ARRAY:
              |
              |  case godot::Variant::Type::PACKED_BYTE_ARRAY:
              |  case godot::Variant::Type::PACKED_INT32_ARRAY:
              |  case godot::Variant::Type::PACKED_INT64_ARRAY:
              |  case godot::Variant::Type::PACKED_FLOAT32_ARRAY:
              |  case godot::Variant::Type::PACKED_FLOAT64_ARRAY:
              |  case godot::Variant::Type::PACKED_STRING_ARRAY:
              |  case godot::Variant::Type::PACKED_VECTOR2_ARRAY:
              |  case godot::Variant::Type::PACKED_VECTOR3_ARRAY:
              |  case godot::Variant::Type::PACKED_COLOR_ARRAY:
              |
              |  case godot::Variant::Type::VARIANT_MAX:
              |    break;
              |}
      return undefined

endClass
