module RogueGD

class Graphic [essential]
  PROPERTIES
    node     : GDObject

    position : XYZ
    scale    = XYZ(1,1,1)
    rotation : XYZ

    base_size  = XYZ(1,1,1)
    base_scale = XYZ(1,1,1)

  METHODS
    method init( node )
      if (node)
        base_size = find_base_size
      endIf

    method init( existing:Graphic )
      this.node = existing.node.cloned
      this.@position = existing.position
      this.@scale = existing.scale
      this.@rotation = existing.rotation
      this.base_size = existing.base_size
      this.base_scale = existing.base_scale
      existing.node.parent.add( this.node )

    method cloned->Graphic
      return Graphic( this )

    method add( child:Graphic )
      node.add( child.node )

    method find_base_size->XYZ
      if (node.has_method("get_size"))
        local size = node( "get_size" )
        if (size.is_xyz) return size
        else             return XYZ( size->XY, 1 )
      endIf

      if (node.has_meta("size"))
        local size = node.meta( "size" )
        if (size.is_xyz) return size
        else             return XYZ( size->XY, 1 )
      endIf

      if local frames = node.sprite_frames
        if local frame = frames.texture("default",0)
          return XYZ( frame.size, 1 )
        endIf
      endIf

      return XYZ(1,1,1)

    method delete
      if (node)
				node.delete
        node = GDObject()
      endIf

    method get( name:String )->Graphic
      return Graphic( node[name] )

    method is_visible->Logical
      return node.is_visible

    method present
			if (View.mode == View.MODE_2D)
        node.z_index = Graphics.next_z_index
        ++Graphics.next_z_index
      endIf

    method present( position:IntXY )
      this.position = position
      present

    method present( position:XY )
      this.position = position
      present

    method present( position )
      present

    method set_bounds( box:Box )
      position = box.center
      size = box.size

    method set_is_visible( setting:Logical )
			node.is_visible = setting

    method set_base_size( @base_size )

    method set_base_size( xy:XY )
      @base_size = XYZ( xy, 1 )

    method set_position( xy:IntXY )
      set_position( xy->XY )

    method set_position( xy:XY )
      @position = XYZ( xy, position.z )
			if (View.mode == View.MODE_2DX)
        node.position = XYZ( xy.x, Display.size.y - xy.y, position.z )
      else
        node.position = xy
      endIf

    method set_position( xyz:XYZ )
      @position = xyz
			if (View.mode == View.MODE_2DX)
        node.position = XYZ( xyz.x, Display.size.y - xyz.y, xyz.z )
      else
        node.position = xyz
      endIf

    method set_rotation( z:Radians )
			if (View.mode == View.MODE_2D) rotation = z
      else                           rotation = XYZ( 0, 0, z )

    method set_rotation( @rotation )
      node.rotation = rotation

    method set_scale( s:Real64 )
			if (View.mode == View.MODE_2D) scale = XY( s, s )
      else                           scale = XYZ( s, s, s )

    method set_scale( xy:XY )
      @scale = XYZ( xy, scale.z )
      node.scale = (base_scale * scale)->XY

    method set_scale( @scale )
      node.scale = base_scale * scale

    method set_size( sz:Real64 )
      base_scale = XYZ(sz,sz,sz) / base_size

    method set_size( xy:IntXY )
      base_scale = XYZ(xy->XY,1) / base_size

    method set_size( xy:XY )
      base_scale = XYZ(xy,1) / base_size

    method set_size( xyz:XYZ )
      base_scale = xyz / base_size

    method to->String
      if (node) return node.name
      return "(Undefined Graphic)"
endClass
