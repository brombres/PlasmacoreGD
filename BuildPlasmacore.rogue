# To run this build file, install Rogue from github.com/brombres/Rogue then cd
# to this folder and type "rogo" at the command line, or "rogo help" for a list
# of supported commands.

$requireRogue "2.25"

uses Utility/GitIgnorePatcher
uses Utility/VersionNumber

augment Build
  # You can create a Local.rogo file with overrides for these values, e.g.:
  #   AUTOLAUNCH = "path/to/project/folder"
  PROPERTIES
    AUTOLAUNCH        = ""  # Godot project path to auto-launch after a default 'rogo' build.
    GODOT_EXE_MACOS   = ""
    GODOT_EXE_WINDOWS = ""
    GODOT_EXE_LINUX   = ""

    GODOT_CPP_BRANCH = "4.1"
endAugment

routine rogo_default
  rogo_build
  rogo_run
endRoutine

routine rogo_build
  rogo_build_rogue
  if (not execute("(cd Libraries/Plasmacore/GDExtension && rogo build)",&suppress_error))
    System.exit(1)  # avoid a double failure message from the nested Rogo builds
  endIf
endRoutine

routine rogo_build_rogue
  rogo_compile_rogue
endRoutine

routine rogo_compile_rogue( platform="":String )
  if (String.exists(platform))
    # Re-capitalize 'platform'
    local platforms = ["Android","iOS","Linux","macOS","UWP","Web","Windows"]
    forEach (p in platforms)
      if (platform.equals(p,&ignore_case))
        platform = p
        escapeForEach
      endIf
    endForEach
  else
    platform = System.os
  endIf

  local output = File( "Libraries/Plasmacore/GDExtension/Source/Generated" )
  output.create_folder
  local cmd = "roguec Source/Main Plasmacore --libraries=Libraries/Plasmacore/Rogue --gc=manual --gc-threshold=4MB --output=$/RogueProgram"(output)
  cmd .= appending( "--target=$,Plasmacore,C++"(platform) )
  if (platform == "macOS" or platform == "iOS") cmd += ",ObjC"
  execute cmd
endRoutine

routine rogo_run
  # Runs the AUTOLAUNCH project, if defined.
  if (String.exists(Build.AUTOLAUNCH))
    if (System.is_macos)
      local exe = Build.GODOT_EXE_MACOS
      if (String.exists(exe) and not exe.ends_with(".app"))
        local cmd = "$ $/project.godot"(File(Build.GODOT_EXE_MACOS).esc,File(Build.AUTOLAUNCH).esc)
        execute cmd
      else
        local cmd = "open"
        if (String.exists(exe)) cmd .= appending( "-a $"(File(exe).esc) )
        cmd .= appending( "$/project.godot"(File(Build.AUTOLAUNCH).esc) )
        execute cmd
      endIf
    elseIf (System.is_windows)
      if (String.exists(Build.GODOT_EXE_WINDOWS))
        local cmd = "$ $/project.godot"(File(Build.GODOT_EXE_WINDOWS).esc,File(Build.AUTOLAUNCH).esc)
        execute cmd
      endIf
    else
      if (String.exists(Build.GODOT_EXE_LINUX))
        local cmd = "$ $/project.godot"(File(Build.GODOT_EXE_LINUX).esc,File(Build.AUTOLAUNCH).esc)
        execute cmd
      endIf
    endIf
  endIf
endRoutine

routine rogo_sync( project_filepath:String )
  # Syncs the specified project to be automatically kept up-to-date with Plasmacore's build products.
  # Multiple projects can be synced. Run 'rogo unsync <project_filepath>' to stop updating a project with new build products.
  if (not String.exists(project_filepath))
    sync_products
    return
  endIf

  project_filepath = File( project_filepath ).abs
  if (project_filepath.ends_with("/project.godot"))
    project_filepath = File(project_filepath).folder
  endIf

  local synched_projects = String[]
  local file =  File("SynchedProjects.rogo")
  if (file.exists) synched_projects = String( file ).trimmed.split( '\n' )
  if (not synched_projects.contains(project_filepath))
    if (File(project_filepath).exists and File(project_filepath/"project.godot").exists)
      synched_projects.add( project_filepath )
    elseIf (File(project_filepath).exists)
      error.println "[ERROR] $ does not contain a project.godot file - skipping."(project_filepath)
      return
    else
      error.println "[ERROR] Filepath '$' does not exist - skipping."(project_filepath)
      return
    endIf
  endIf
  banner "Now synching build products to " + project_filepath
  file.save( synched_projects.join('\n') + "\n" )

  sync_products
endRoutine

routine rogo_unsync( project_filepath:String )
  # Stops updating the specified Godot project with updated builds of this extension.
  project_filepath = File( project_filepath ).abs

  local synched_projects = String[]
  local file =  File("SynchedProjects.rogo")
  if (file.exists) synched_projects = String( file ).trimmed.split( '\n' )
  synched_projects.remove( project_filepath )
  banner "Build products are no longer synched to " + project_filepath
  file.save( synched_projects.join('\n') )
endRoutine

routine sync_products
  # Copy build products to synched output projects.
  local needs_header = true
  local message = "Synchronizing build products to linked projects"

  local synched_projects = String[]
  local file =  File("SynchedProjects.rogo")
  if (file.exists) synched_projects = String( file ).trimmed.split( '\n' )
  forEach (project_filepath in synched_projects)
    if (rogo_copy_products( project_filepath, &=needs_header ))
      needs_header = false
    endIf
  endForEach

  if (needs_header)
    banner "All synchronized projects are up to date."
  endIf
endRoutine

routine rogo_copy_products( project_filepath:String, &needs_header )->Logical
  # Copy build products to a specific project folder.
  local message = "Synchronizing build products to linked projects"
  local synched_any = false

  local project_folder = File( project_filepath )
  if (not project_folder.exists) return false

  local output = subrogo( "copy products $ $ $"(project_folder.esc,needs_header,Console.width) )
  if (String.exists(output))
    synched_any = true
    needs_header = false
  endIf

  if (copy("Plasmacore.gd", project_folder, &=needs_header))
    needs_header = false
    synched_any = true
  endIf

  if (copy("PlasmacoreConfig.gd", project_folder, &=needs_header))
    needs_header = false
    synched_any = true
  endIf

  return synched_any
endRoutine

routine rogo_deps
  # Updates dependencies or configuration files as necessary.
  local patcher = GitIgnorePatcher( ".gitignore" )

  patch_gitignore( patcher )

  if (patcher.is_modified)
    if (patcher.file.exists) banner "Updating .gitignore"
    else                     banner "Creating .gitignore"
    patcher.print_new_entries
    patcher.save
  endIf
endRoutine

routine patch_gitignore( patcher:GitIgnorePatcher )
  patcher.add( "# Rogo", ".rogo" )
  patcher.add( "# Rogo", "/Build" )
  patcher.add( "# Rogo", "BuildLocal.rogue" )
  patcher.add( "# Rogo", "/SynchedProjects.rogo" )
  patcher.add( "# Rogo", "Local.rogo" )

  patcher.add( "# SCons", ".sconsign.dblite" )

  patcher.add( "# Vim", "*.swo" )
  patcher.add( "# Vim", "*.swp" )
endRoutine

routine copy( filename:String, project_path:String, &needs_header )->Logical
  local message = "Synchronizing build products to linked projects"
  local src = File("Libraries/Plasmacore/Godot"/filename)
  local dest = File(project_path/filename)
  local copied_any = false

  if (dest.exists and dest.is_newer_than(src))  # FIXME: DEV KLUDGE
    if local n = dest.copy_to( src, &if_newer, &dry_run )
      if (n > 0)
        if (needs_header)
          banner message
          needs_header = false
        endIf
        dest.copy_to( src, &if_newer, &verbose )
        copied_any = true
      endIf
    endIf
  endIf

  if local n = src.copy_to( dest, &if_different, &dry_run )
    if (n > 0)
      if (needs_header)
        banner message
        needs_header = false
      endIf
      src.copy_to( dest, &if_different, &verbose )
      copied_any = true
    endIf
  endIf

  if local n = src.copy_to( dest, &if_different, &verbose )
    if (n > 0) copied_any = true
  endIf

  return copied_any
endRoutine

routine subrogo( args="":String )->String
  local cmd = "cd Libraries/Plasmacore/GDExtension && rogo".appending(args)
  local result = Process.run( cmd, &env )
  local output = result->String
  if (not result.success)
    error.println output
    System.exit(1)  # avoid a double failure message from the nested Rogo build
  endIf
  if (output.count) println output
  return output
endRoutine

routine banner( content:String )
  local n = Console.width.or_smaller(100)
  content .= word_wrapped( n-2 )

  println "┌$┐" ("─"*(n-2))
  forEach (line in content.split('\n'))
    println "│$$│"(line," "*(n-(line.count+2)))
  endForEach
  println "└$┘" ("─"*(n-2))
endRoutine

routine execute( commands:String, error_message=null:String, &suppress_error )->Logical
  forEach (cmd in LineReader(commands))
    print( "> " )
    println( cmd )
    if (0 != System.run(cmd))
      if (suppress_error)
        return false
      else
        if (not error_message) error_message = "Build failed."
        throw Error( error_message )
      endIf
    endIf
  endForEach
  return true
endRoutine


#-------------------------------------------------------------------------------
# Introspection-based Launcher Framework
#-------------------------------------------------------------------------------
# Rogo is a "build your own build system" facilitator. At its core Rogo just
# recompiles build files if needed and then runs the build executable while
# forwarding any command line arguments. This file contains a default framework
# which uses introspection to turn command line arguments into parameterized
# routine calls.

# Example: to handle the command "rogo abc xyz 5", define
# "routine rogo_abc_xyz( n:Int32 )".

# "rogo_default" will run in the absence of any other command line argument.

# The following "comment directives" can be used in this file to control how
# RogueC compiles it and to manage automatic dependency installation and
# linking.

# Each of the following should be on a line beginning with the characters #$
# (preceding whitespace is fine). Sample args are given.

#   ROGUEC       = roguec       # Path to roguec to compile this file with
#   ROGUEC_ARGS  = --whatever   # Additional options to pass to RogueC
#   CC           = gcc -Wall -fno-strict-aliasing
#   CC_ARGS      = -a -b -c          # Additional C args
#   LINK         = -lalpha -lbeta    # Link this build file with these options
#   LINK(macOS)  = ...               # Options applying only to
#                                    # System.os=="macOS" (use with any OS and
#                                    # any comment directive)
#   LINK_LIBS    = true              # Links following LIBRARIES with this Build
#                                    # file (otherwise just installs them)
#   LINK_LIBS    = false             # Linking turned off for following
#                                    # LIBRARIES - info can still be obtained
#                                    # from $LIBRARY_FLAGS or $LIBRARIES(libname,...)
#   LIBRARIES    = libalpha
#   LIBRARIES    = libbeta(library-name)
#   LIBRARIES    = libfreetype6-dev(freetype2)
#   DEPENDENCIES = Library/Rogue/**/*.rogue
#
#   LIBRARIES    = name(package)
#   LIBRARIES    = name(
#                    exe:<which-name>
#                    exists-cmd:<exists-cmd>
#                    flags:<library-flags>
#                    ignore-exe-only:<setting>
#                    info:<info-name>
#                    info-cmd:<get-info-cmd>
#                    install:<install-name>
#                    install-cmd:<install-cmd>
#                    link:<setting>
#                    package:<package-name>
#                  )
#
# The following macro is replaced within this file (Build.rogue) - the libraries
# should normally also be declared in #$ LIBRARIES:
#
#   $LIBRARY_FLAGS(lib1,lib2)                              # sample macro
#     ->
#   -Ipath/to/lib1/include -Lpath/to/lib1/library -I ...   # sample replacement

routine syntax( command:String, text:String )
  Build.rogo_syntax[ command ] = text
endRoutine

routine description( command:String, text:String )
  Build.rogo_descriptions[ command ] = text
endRoutine

routine help( command:String, description_text=null:String, syntax_text=null:String )
  if (description_text) description( command, description_text )
  if (syntax_text)      syntax( command, syntax_text )
endRoutine

try
  Build.launch
catch (err:Error)
  Build.rogo_error = err
  Build.on_error
endTry

class Build [singleton]
  PROPERTIES
    rogo_syntax         = [String:String]
    rogo_descriptions   = [String:String]
    rogo_prefix         = "rogo_"
    rogo_command        = "default"
    rogo_args           = @[]
    rogo_error          : Error

    LOCAL_SETTINGS_FILE = "Local.rogo"

  METHODS
    method launch
      rogo_args.add( forEach in System.command_line_arguments )
      read_defs
      on_launch
      parse_args
      dispatch_command

    method dispatch_command
      local m = find_command( rogo_command )
      if (not m) throw Error( "No such routine rogo_$()" (rogo_command) )

      local args = @[]
      forEach (arg in rogo_args)
        which (arg)
          case "true":  args.add( true )
          case "false": args.add( false )
          case "null":  args.add( null )
          others:       args.add( arg )
        endWhich
      endForEach
      m( args )

    method find_command( name:String )->MethodInfo
      return <<Routine>>.find_global_method( rogo_prefix + name )

    method on_error
      local w = Console.width.or_smaller( 80 )
      Console.error.println "=" * w
      Console.error.println rogo_error->String.word_wrapped(w)
      Console.error.println "=" * w
      on_exit
      System.exit 1

    method on_command_found
      noAction

    method on_command_not_found
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (rogo_args.first)
      println "=" * w
      println
      rogo_command = "help"
      rogo_args.clear
      on_command_found

    method on_launch
      noAction

    method on_exit
      noAction

    method parse_args
      block
        if (rogo_args.count)
          local parts = String[]
          parts.add( forEach in rogo_args )
          rogo_args.clear

          while (parts.count)
            local cmd = parts.join("_")
            if (find_command(cmd))
              rogo_command = cmd
              on_command_found
              escapeBlock
            endIf
            rogo_args.insert( parts.remove_last )
          endWhile

          on_command_not_found
        endIf

        # Use default command
        on_command_found
      endBlock

    method read_defs
      read_defs( LOCAL_SETTINGS_FILE )

    method read_defs( defs_filepath:String )
      # Attempt to read defs from Local.rogo
      local overrides = String[]
      if (File(defs_filepath).exists)
        forEach (line in LineReader(File(defs_filepath)))
          if (line.contains("="))
            local name  = line.before_first('=').trimmed
            local rhs   = line.after_first('=').trimmed
            local value : Value
            if (rhs.begins_with('"') or rhs.begins_with('\''))
              value = rhs.leftmost(-1).rightmost(-1)
            elseIf (rhs.begins_with('{') or rhs.begins_with('['))
              value = JSON.parse( rhs )
            else
              value = rhs
            endIf
            local p = <<Build>>.find_property( name )
            if (p)
              overrides.add( "$ = $" (name,value) )
              p.set_value( this, value )
            endIf
          endIf
        endForEach
      endIf

    method _join( value:Value )->String
      local args = String[]
      args.add( forEach in value )
      return args.join( "_" )
endClass


routine rogo_help( command="":String )
  # SYNTAX: rogo help [command]
  # Displays help for a specified command or else all build commands.
  command = Build._join( Build.rogo_args )
  if (command.count)
    local syntax = get_syntax( command )
    local success = false
    if (syntax)
      println "SYNTAX"
      println "  " + syntax
      println
      success = true
    endIf
    local description = get_description( command )
    if (description)
      description .= replacing("<br>","\n")
      local max_w = Console.width - 2
      println "DESCRIPTION"
      forEach (line in LineReader(description.word_wrapped(max_w)))
        print( "  " )
        println( line )
      endForEach
      println
      success = true
    endIf
    if (success)
      return
    else
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (command)
      println "=" * w
      println
    endIf
  endIf

  println "USAGE"
  local entries = CommandInfo[]
  local max_len = 0
  forEach (m in <<Routine>>.global_methods)
    if (m.name.begins_with(Build.rogo_prefix))
      local name = m.name.after_first( Build.rogo_prefix )
      local entry = CommandInfo( name, get_syntax(name), get_description(name) )
      max_len .= or_larger( entry.syntax.count )
      entries.add entry
    endIf
  endForEach

  entries.sort( $1.name < $2.name )
  max_len += 2

  local max_w = Console.width
  forEach (entry in entries)
    print "  " + entry.syntax
    if (entry.@description)
      local description = entry.@description.before_first( '\n' )
      loop (max_len - entry.syntax.count) print ' '
      contingent
        sufficient (2 + max_len + description.count <= max_w)
        if (description.contains(". "))
          description = description.before_first( ". " ) + "."
          sufficient (max_len + description.count <= max_w)
        endIf
        necessary (max_len + 10 <= max_w)
        description = description.unright( (description.count - (max_w - max_len))+5 ) + "..."
      satisfied
        print description
      endContingent
    endIf
    println
  endForEach
  println
endRoutine

routine get_syntax( m_name:String )->String
  if (Build.rogo_syntax.contains(m_name))
    return "rogo " + Build.rogo_syntax[ m_name ]
  else
    local m = <<Routine>>.find_global_method( Build.rogo_prefix + m_name )
    if (not m) return null
    local line = "rogo $" (m_name.replacing('_',' '))
    line += " <$>" ((forEach in m.parameters).name)
    return line
  endIf
endRoutine


routine get_description( m_name:String )->String
  if (Build.rogo_descriptions.contains(m_name))
    return Build.rogo_descriptions[ m_name ]
  else
    return null
  endIf
endRoutine

class CommandInfo( name:String, syntax:String, description:String );
